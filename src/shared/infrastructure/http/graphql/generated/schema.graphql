### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuditLog {
  actionType: String!
  changes: [AuditLogChange!]!
  createdAt: String!
  executor: User
  executorId: ID!
  id: ID!
  target: User
  targetId: ID!
}

enum AuditLogActionType {
  USER_DELETE
  USER_UPDATE
  WALLET_DELETE
  WALLET_UPDATE
}

type AuditLogChange {
  key: String!
  values: [AuditLogChangeValue!]!
}

type AuditLogChangeValue {
  from: String!
  to: String!
}

input AuditLogFilter {
  actionTypes: [AuditLogActionType!]
  email: String
  endDate: DateTime
  id: String
  name: String
  startDate: DateTime
}

input AuditLogHydrateOption {
  executor: Boolean!
  target: Boolean!
}

type AuditLogsWithPagination {
  auditLogs: [AuditLog!]!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  page: Int!
  totalPages: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Login {
  expiresAt: String!
  token: String!
}

type Mutation {
  confirmVerification(code: String!, email: String!): Verification
  login(email: String!, password: String!): Login
  loginAdmin(email: String!, password: String!): Login
  pay(amount: Int!, cashierId: String!): Wallet
  register(confirmPassword: String!, email: String!, name: String!, password: String!): User
  resendVerification(email: String!): Verification
  setBalance(balance: Int!, userId: String!): Wallet
  topUp(amount: Int!, receiverId: String!): Wallet
  transferBalanceByUserEmail(amount: Int!, receiverEmail: String!): WalletTransfer
  transferBalanceByUserId(amount: Int!, receiverId: String!): WalletTransfer
  updateUserAccountTypeByUserId(accountType: String!, userId: String!): User
  withdrawBalance(amount: Int!, topUpCashierId: String!): Wallet
}

enum OrderBy {
  asc
  desc
}

type Query {
  getAuditLogsByFilterAndPagination(filter: AuditLogFilter, hydrate: AuditLogHydrateOption, orderBy: OrderBy, page: Int!, perPage: Int!): AuditLogsWithPagination
  getAuditLogsByPagination(page: Int!, perPage: Int!): AuditLogsWithPagination
  getCashierTopUpTransactionsByPagination(hydrate: TransactionHydrateOption, page: Int!, perPage: Int!): TransactionsWithPagination
  getCashierTransactionsByPagination(hydrate: TransactionHydrateOption, page: Int!, perPage: Int!): TransactionsWithPagination
  getRecentTransactionsByUserId(hydrate: TransactionHydrateOption, page: Int!, perPage: Int!): TransactionsWithPagination
  getTransactionsByFilterAndPagination(filter: TransactionFilter, hydrate: TransactionHydrateOption, orderBy: OrderBy, page: Int!, perPage: Int!): TransactionsWithPagination
  getUser: User
  getUserBalanceByUserId: UserBalance
  getUsersByPagination(page: Int!, perPage: Int!): UserPagination
}

type Transaction {
  amount: Float!
  createdAt: String!
  id: ID!
  receiver: User
  receiverId: ID!
  sender: User
  senderId: ID!
  status: String!
  type: String!
}

input TransactionFilter {
  accountTypes: [UserAccountType!]
  email: String
  endDate: DateTime
  id: String
  name: String
  startDate: DateTime
  status: [TransactionStatus!]
  types: [TransactionType!]
}

input TransactionHydrateOption {
  receiver: Boolean!
  sender: Boolean!
}

enum TransactionStatus {
  FAILED
  PROCESSING
  SUCCESS
}

enum TransactionType {
  DEPOSIT
  PAYMENT
  TRANSFER
  WITHDRAW
}

type TransactionsWithPagination {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  page: Int!
  totalPages: Int!
  transactions: [Transaction!]!
}

type User {
  accountType: String!
  createdAt: String!
  deletedAt: String
  email: String!
  id: String!
  isDeleted: Boolean!
  name: String!
  receivedTransactions: [Transaction!]!
  sentTransactions: [Transaction!]!
  updatedAt: String!
  wallet: Wallet
}

enum UserAccountType {
  ADMIN
  CASHIER
  CASH_TOP_UP
  SUPER_ADMIN
  USER
}

type UserBalance {
  balance: Float!
}

input UserHydrateOption {
  receivedTransactions: Boolean!
  sentTransactions: Boolean!
  wallet: Boolean!
}

type UserPagination {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  page: Int!
  totalPages: Int!
  users: [User!]!
}

type Verification {
  code: String!
  createdAt: String!
  expiredAt: String!
  id: ID!
  status: String!
  updatedAt: String!
  user: User
  userId: ID!
}

type Wallet {
  balance: Float!
  createdAt: String!
  deletedAt: String
  id: ID!
  isDeleted: Boolean!
  updatedAt: String!
  user: User
}

input WalletHydrateOption {
  receiver: Boolean!
  sender: Boolean!
}

type WalletTransfer {
  receiverWallet: Wallet!
  senderWallet: Wallet!
}