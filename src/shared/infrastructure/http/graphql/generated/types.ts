/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AuditLogHydrateOption: { // input type
    executor: boolean; // Boolean!
    target: boolean; // Boolean!
  }
  TransactionHydrateOption: { // input type
    receiver: boolean; // Boolean!
    sender: boolean; // Boolean!
  }
  UserHydrateOption: { // input type
    receivedTransactions: boolean; // Boolean!
    sentTransactions: boolean; // Boolean!
    wallet: boolean; // Boolean!
  }
  WalletHydrateOption: { // input type
    receiver: boolean; // Boolean!
    sender: boolean; // Boolean!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuditLog: {};
  AuditLogChange: { // root type
    key: string; // String!
    values: NexusGenRootTypes['AuditLogChangeValue'][]; // [AuditLogChangeValue!]!
  }
  AuditLogChangeValue: { // root type
    from: string; // String!
    to: string; // String!
  }
  AuditLogPagination: { // root type
    auditLogs: NexusGenRootTypes['AuditLog'][]; // [AuditLog!]!
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    page: number; // Int!
    totalPages: number; // Int!
  }
  Login: { // root type
    expiresAt: string; // String!
    token: string; // String!
  }
  Mutation: {};
  Query: {};
  Transaction: {};
  TransactionByUserIdWithPagination: { // root type
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    page: number; // Int!
    totalPages: number; // Int!
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
  }
  User: {};
  UserBalance: { // root type
    balance: number; // Float!
  }
  UserPagination: { // root type
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    page: number; // Int!
    totalPages: number; // Int!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Verification: {};
  Wallet: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuditLog: { // field return type
    actionType: string; // String!
    changes: NexusGenRootTypes['AuditLogChange'][] | null; // [AuditLogChange!]
    createdAt: string; // String!
    executor: NexusGenRootTypes['User'] | null; // User
    executorId: string; // ID!
    id: string; // ID!
    target: NexusGenRootTypes['User'] | null; // User
    targetId: string; // ID!
  }
  AuditLogChange: { // field return type
    key: string; // String!
    values: NexusGenRootTypes['AuditLogChangeValue'][]; // [AuditLogChangeValue!]!
  }
  AuditLogChangeValue: { // field return type
    from: string; // String!
    to: string; // String!
  }
  AuditLogPagination: { // field return type
    auditLogs: NexusGenRootTypes['AuditLog'][]; // [AuditLog!]!
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    page: number; // Int!
    totalPages: number; // Int!
  }
  Login: { // field return type
    expiresAt: string; // String!
    token: string; // String!
  }
  Mutation: { // field return type
    confirmVerification: NexusGenRootTypes['Verification'] | null; // Verification
    login: NexusGenRootTypes['Login'] | null; // Login
    pay: NexusGenRootTypes['Wallet'] | null; // Wallet
    register: NexusGenRootTypes['User'] | null; // User
    resendVerification: NexusGenRootTypes['Verification'] | null; // Verification
    setBalance: NexusGenRootTypes['Wallet'] | null; // Wallet
    topUp: NexusGenRootTypes['Wallet'] | null; // Wallet
    transferBalance: NexusGenRootTypes['Wallet'] | null; // Wallet
    updateUserAccountTypeByUserId: NexusGenRootTypes['User'] | null; // User
    withdrawBalance: NexusGenRootTypes['Wallet'] | null; // Wallet
  }
  Query: { // field return type
    getAuditLogsByPagination: NexusGenRootTypes['AuditLogPagination'] | null; // AuditLogPagination
    getRecentTransactionsByUserId: NexusGenRootTypes['TransactionByUserIdWithPagination'] | null; // TransactionByUserIdWithPagination
    getUser: NexusGenRootTypes['User'] | null; // User
    getUserBalanceByUserId: NexusGenRootTypes['UserBalance'] | null; // UserBalance
    getUsersByPagination: NexusGenRootTypes['UserPagination'] | null; // UserPagination
  }
  Transaction: { // field return type
    amount: number; // Float!
    createdAt: string; // String!
    id: string; // ID!
    receiver: NexusGenRootTypes['User'] | null; // User
    receiverId: string; // ID!
    sender: NexusGenRootTypes['User'] | null; // User
    senderId: string; // ID!
    type: string; // String!
  }
  TransactionByUserIdWithPagination: { // field return type
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    page: number; // Int!
    totalPages: number; // Int!
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
  }
  User: { // field return type
    accountType: string; // String!
    createdAt: string; // String!
    deletedAt: string | null; // String
    email: string; // String!
    id: string; // String!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    receivedTransactions: NexusGenRootTypes['Transaction'][] | null; // [Transaction!]
    sentTransactions: NexusGenRootTypes['Transaction'][] | null; // [Transaction!]
    updatedAt: string; // String!
    wallet: NexusGenRootTypes['Wallet'] | null; // Wallet
  }
  UserBalance: { // field return type
    balance: number; // Float!
  }
  UserPagination: { // field return type
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    page: number; // Int!
    totalPages: number; // Int!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Verification: { // field return type
    code: string; // String!
    createdAt: string; // String!
    expiredAt: string; // String!
    id: string; // ID!
    status: string; // String!
    updatedAt: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // ID!
  }
  Wallet: { // field return type
    balance: number; // Float!
    createdAt: string; // String!
    deletedAt: string | null; // String
    id: string; // ID!
    isDeleted: boolean; // Boolean!
    updatedAt: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenFieldTypeNames {
  AuditLog: { // field return type name
    actionType: 'String'
    changes: 'AuditLogChange'
    createdAt: 'String'
    executor: 'User'
    executorId: 'ID'
    id: 'ID'
    target: 'User'
    targetId: 'ID'
  }
  AuditLogChange: { // field return type name
    key: 'String'
    values: 'AuditLogChangeValue'
  }
  AuditLogChangeValue: { // field return type name
    from: 'String'
    to: 'String'
  }
  AuditLogPagination: { // field return type name
    auditLogs: 'AuditLog'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    page: 'Int'
    totalPages: 'Int'
  }
  Login: { // field return type name
    expiresAt: 'String'
    token: 'String'
  }
  Mutation: { // field return type name
    confirmVerification: 'Verification'
    login: 'Login'
    pay: 'Wallet'
    register: 'User'
    resendVerification: 'Verification'
    setBalance: 'Wallet'
    topUp: 'Wallet'
    transferBalance: 'Wallet'
    updateUserAccountTypeByUserId: 'User'
    withdrawBalance: 'Wallet'
  }
  Query: { // field return type name
    getAuditLogsByPagination: 'AuditLogPagination'
    getRecentTransactionsByUserId: 'TransactionByUserIdWithPagination'
    getUser: 'User'
    getUserBalanceByUserId: 'UserBalance'
    getUsersByPagination: 'UserPagination'
  }
  Transaction: { // field return type name
    amount: 'Float'
    createdAt: 'String'
    id: 'ID'
    receiver: 'User'
    receiverId: 'ID'
    sender: 'User'
    senderId: 'ID'
    type: 'String'
  }
  TransactionByUserIdWithPagination: { // field return type name
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    page: 'Int'
    totalPages: 'Int'
    transactions: 'Transaction'
  }
  User: { // field return type name
    accountType: 'String'
    createdAt: 'String'
    deletedAt: 'String'
    email: 'String'
    id: 'String'
    isDeleted: 'Boolean'
    name: 'String'
    receivedTransactions: 'Transaction'
    sentTransactions: 'Transaction'
    updatedAt: 'String'
    wallet: 'Wallet'
  }
  UserBalance: { // field return type name
    balance: 'Float'
  }
  UserPagination: { // field return type name
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    page: 'Int'
    totalPages: 'Int'
    users: 'User'
  }
  Verification: { // field return type name
    code: 'String'
    createdAt: 'String'
    expiredAt: 'String'
    id: 'ID'
    status: 'String'
    updatedAt: 'String'
    user: 'User'
    userId: 'ID'
  }
  Wallet: { // field return type name
    balance: 'Float'
    createdAt: 'String'
    deletedAt: 'String'
    id: 'ID'
    isDeleted: 'Boolean'
    updatedAt: 'String'
    user: 'User'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    confirmVerification: { // args
      code: string; // String!
      email: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    pay: { // args
      amount: number; // Int!
      cashierId: string; // String!
    }
    register: { // args
      confirmPassword: string; // String!
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
    resendVerification: { // args
      email: string; // String!
    }
    setBalance: { // args
      balance: number; // Int!
      userId: string; // String!
    }
    topUp: { // args
      amount: number; // Int!
      receiverId: string; // String!
    }
    transferBalance: { // args
      amount: number; // Int!
      receiverId: string; // String!
    }
    updateUserAccountTypeByUserId: { // args
      accountType: string; // String!
      userId: string; // String!
    }
    withdrawBalance: { // args
      amount: number; // Int!
      topUpCashierId: string; // String!
    }
  }
  Query: {
    getAuditLogsByPagination: { // args
      page: number; // Int!
      perPage: number; // Int!
    }
    getRecentTransactionsByUserId: { // args
      hydrate?: NexusGenInputs['TransactionHydrateOption'] | null; // TransactionHydrateOption
      page: number; // Int!
      perPage: number; // Int!
    }
    getUsersByPagination: { // args
      page: number; // Int!
      perPage: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}